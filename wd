#!/bin/sh
#
# A script for magento 2 installation
# in a Warden environment.

usage() {
  echo "Utility for using Warden in dev with supporting apps"
  echo "Usage: wd [action]"
  echo ""
  echo "Actions:"
  printf "  %-15s%-30s\n" "-i" "Install Magento"
  printf "  %-15s%-30s\n" "-n [php version] 8.1 default" "New Warden environment"
  printf "  %-15s%-30s\n" "-db [dump|reimport] [file] 8.1 default" "Dump|reimport db"
  printf "  %-15s%-30s\n" "-r" "Reindex"
  printf "  %-15s%-30s\n" "-u" "Run setup:upgrade"
  printf "  %-15s%-30s\n" "-c" "Clean cache"
  printf "  %-15s%-30s\n" "-w" "Start cache-clean watcher"
  printf "  %-15s%-30s\n" "-v" "Run coding standards check"
  printf "  %-15s%-30s\n" "-ls" "Enable Live Search/Disable ElasticSearch"
  printf "  %-15s%-30s\n" "-es" "Enable ElasicSearch/Disable Live Search"
  echo ""

}

DEFAULT_PHP_VERSION=8.1

initialize(){ 
    echo "\nInitializing Warden environment\n"
    ENVIRONMENTVARIABLESFILE=".env"
    DEFAULTENVIRONMENTVARIABLESFILE=".envdefaults"
    CURRENTDIR=${PWD##*/}
    #create env file
    warden env-init ${CURRENTDIR} magento2
    
    #replace server variables - assume php 8 is default, otherwise take the file as generated 
    #possible expansion to future version support

    if [ $phpVersion = $DEFAULT_PHP_VERSION ]; then
        set81
    fi
    . $DEFAULTENVIRONMENTVARIABLESFILE
    addEnvVariables
    # execute the file that sets the environment variables
    . $ENVIRONMENTVARIABLESFILE
    
    warden sign-certificate ${TRAEFIK_DOMAIN}
    
    warden env up

}

set81(){
    sed -i "s/ELASTICSEARCH_VERSION=7.6/ELASTICSEARCH_VERSION=7.16/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/MARIADB_VERSION=10.3/MARIADB_VERSION=10.4/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/NODE_VERSION=10/NODE_VERSION=7.6/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/COMPOSER_VERSION=1/COMPOSER_VERSION=2.1/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/PHP_VERSION=7.4/PHP_VERSION=8.1/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/RABBITMQ_VERSION=3.8/RABBITMQ_VERSION=3.9/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/REDIS_VERSION=5.0/REDIS_VERSION=6.2/" $ENVIRONMENTVARIABLESFILE
    sed -i "s/VARNISH_VERSION=6.0/VARNISH_VERSION=7.0/" $ENVIRONMENTVARIABLESFILE
}

addEnvVariables(){
    echo "\n" >> $ENVIRONMENTVARIABLESFILE
    echo "ADMIN_USERNAME=${ADMIN_USERNAME}" >> $ENVIRONMENTVARIABLESFILE
    echo "ADMIN_FIRSTNAME=${ADMIN_FIRSTNAME}" >> $ENVIRONMENTVARIABLESFILE
    echo "ADMIN_LASTNAME=${ADMIN_LASTNAME}" >> $ENVIRONMENTVARIABLESFILE
    echo "ADMIN_EMAIL=${ADMIN_EMAIL}" >> $ENVIRONMENTVARIABLESFILE
    echo "ADMIN_PASSWORD=${ADMIN_PASSWORD}" >> $ENVIRONMENTVARIABLESFILE
    echo "DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE}" >> $ENVIRONMENTVARIABLESFILE
    echo "DEFAULT_CURRENCY=${DEFAULT_CURRENCY}" >> $ENVIRONMENTVARIABLESFILE
    echo "DEFAULT_TIMEZONE=${DEFAULT_TIMEZONE}" >> $ENVIRONMENTVARIABLESFILE
    echo "DATABASE_USER=${DATABASE_USER}" >> $ENVIRONMENTVARIABLESFILE
    echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> $ENVIRONMENTVARIABLESFILE
    echo "BACKEND_FRONTNAME=${BACKEND_FRONTNAME}" >> $ENVIRONMENTVARIABLESFILE
    echo "# magento encryption key (if you have one) leave blank to have one generated" >> $ENVIRONMENTVARIABLESFILE
    echo "KEY=${KEY}" >> $ENVIRONMENTVARIABLESFILE
}

dbDump(){
    if [ $fileName ]
    then
        echo "Dumping Database"
        warden db dump | gzip > $fileName.sql.gz
        echo "$fileName.sql.gz created"
    else
         echo "Filename required"    
    fi
}

dbReimport(){
    read -r -p "Do you want to reimport the database? [n/y] " REPLY
    if test "$REPLY" = "y" -o "$REPLY" = "Y"; then
       if [ $fileName ]
        then
            #drop and create db
            warden shell -c "mysql -u root -p -h db --password=magento -e 'drop database magento'"
            warden shell -c "mysql -u root -p -h db --password=magento -e 'create database magento'"
            pv $fileName | gunzip -c | warden db import
            echo "Done"
        else
            echo "filename required"    
        fi
    else
        exit 0
    fi
    
}


if [ "$1" = "" ]; then
    usage
fi

while [ -n "$1" ]

# while loop starts

do

case "$1" in

# code validation

-v) if [ -z "$2" ] 
    then  
      read -r -p "Path to module to check " MODULE
    else
      MODULE=$2
    fi
    checkCodingStandards "$MODULE"
    shift
    shift;;

# install

-i) read -r -p "Do you want to install? [n/y] " REPLY
    if test "$REPLY" = "y" -o "$REPLY" = "Y"; then
       # Need to create this directory if pulling in from repo
       warden shell -c "mkdir /var/www/html/pub/static"
       warden shell -c "./vpwarden -i"
       fileName="dbBaseInstall"
       dbDump
    else
        exit 0
    fi

    shift;;

# initialize new warden environment
-n) if [ "$2" ] 
    then  
      phpVersion=$2
    else
       phpVersion=$DEFAULT_PHP_VERSION
    fi
    initialize
    shift
    shift;;

-db) fileName=$3 
    if [ "$2" = "dump" ] 
    then  
        dbDump
    elif [ "$2" = "reimport" ] 
    then
        dbReimport
    else
      echo "invalid option for -db"    
    fi

    shift
    shift
    shift;;        

# cache clean

-c) warden shell -c "./vpwarden -c"
    shift;;

# cache clean watch

-w) vendor/bin/cache-clean.js --watch 
    shift;;

# reindex

-r) warden shell -c "./vpwarden -r"
    shift;;


# enable live search

-ls) warden shell -c "./vpwarden -ls"
    shift;;

# disable live search

-es) warden shell -c "./vpwarden -es"
    shift;;

# upgrade

-u) warden shell -c "./vpwarden -u"
    shift;;

-t) warden shell -c "./vpwarden -t"
    shift;;   

*)  echo "1-$1"
    echo $2
    usage
    shift;;
# Exit the loop using break command

esac

done